--- nl80211.h
+++ nl80211.h
@@ -2354,6 +2354,9 @@ enum nl80211_frequency_attr {
 	NL80211_FREQUENCY_ATTR_NO_HT40_PLUS,
 	NL80211_FREQUENCY_ATTR_NO_80MHZ,
 	NL80211_FREQUENCY_ATTR_NO_160MHZ,
+	NL80211_FREQUENCY_ATTR_NO_20MHZ,
+	NL80211_FREQUENCY_ATTR_NO_10MHZ,
+	NL80211_FREQUENCY_ATTR_OCB_ONLY,
 	NL80211_FREQUENCY_ATTR_DFS_CAC_TIME,
 
 	/* keep last */
@@ -2535,6 +2538,7 @@ enum nl80211_reg_rule_flags {
 	NL80211_RRF_NO_IR		= 1<<7,
 	__NL80211_RRF_NO_IBSS		= 1<<8,
 	NL80211_RRF_AUTO_BW		= 1<<11,
+	NL80211_RRF_OCB_ONLY		= 1<<12,
 };
 
 #define NL80211_RRF_PASSIVE_SCAN	NL80211_RRF_NO_IR

--- regdb.h
+++ regdb.h
@@ -82,6 +82,7 @@
 	RRF_NO_IR		= 1<<7, /* do not initiate radiation */
 	__RRF_NO_IBSS		= 1<<8, /* old no-IBSS rule, maps to no-ir */
 	RRF_AUTO_BW		= 1<<11, /* Auto BW calculations */
+	RRF_OCB_ONLY		= 1<<12, /* OCB for 802.11p support */
 };
 
 #define RRF_NO_IR_ALL	(RRF_NO_IR | __RRF_NO_IBSS)

--- reglib.c
+++ reglib.c
@@ -746,6 +746,8 @@ static void print_reg_rule(const struct ieee80211_reg_rule *rule)
 		printf(", NO-IR");
 	if (rule->flags & RRF_AUTO_BW)
 		printf(", AUTO-BW");
+	if (rule->flags & RRF_OCB_ONLY)
+		printf(", OCB-ONLY");
 
 	printf("\n");
 }
