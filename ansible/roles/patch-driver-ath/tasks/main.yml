# not strictly required for patching, but let's make sure we can
# actually use the device then ;)
- name: "install required firmwares (May 2020: for ath10k devices)"
  package:
    name: firmware-atheros
  become: yes

- name: determine latest kernel version
  block:

    - name: query kernel version from apt
      register: apt_show_linux_result
      shell: apt show linux-image-amd64 | grep Version | cut -d' ' -f2
      changed_when: false

    - name: set kernel version to use
      set_fact:
        kernel_package_version: "{{ apt_show_linux_result.stdout_lines.0 }}"

  when: not kernel_package_version

- name: extract kernel upstream version Debian package version
  set_fact:
    # e.g., extract "4.18" from "4.18+99"
    # not quite elegant, improvements welcome:
    kernel_upstream_version: "{{
      kernel_package_version.split('+', 1).0.split('~', 1).0
    }}"
    # e.g., extract "4.18" from "4.18.3.2"
    kernel_major_minor_version: "{{
      kernel_package_version.split('.').0
      }}.{{
      kernel_package_version.split('.').1
    }}"

- name: print kernel versions we plan to use
  debug: msg="will try to use the detected latest available kernel
              package version {{ kernel_package_version }}
              (upstream version {{ kernel_upstream_version }})"

- name: install required apt packages to compile kernel modules
  apt:
    name:
      - "linux-image-{{ kernel_arch }}={{ kernel_package_version }}"
      - "linux-headers-{{ kernel_arch }}={{ kernel_package_version }}"
      - "linux-source={{ kernel_package_version }}"
      - build-essential
      - kernel-package
      - libssl-dev
      - needrestart
  become: yes

- name: check if we are running the latest kernel installed
  register: needrestart_result
  # Specifying the full path here, since ``/usr/sbin/` Ã¬sn't usually
  # in $PATH of ordinary users, but does not need elevated
  # rights to execute:
  command: /usr/sbin/needrestart -kb
  changed_when: false

- name: reboot if we are not running the latest kernel installed
  reboot:
  when: "'NEEDRESTART-KSTA: 1' not in needrestart_result.stdout_lines"
  become: yes

- name: create directory to extract the kernel sources to
  file:
    path: "{{ linux_source_dir }}"
    state: directory

- name: extract kernel sources
  unarchive:
    remote_src: yes
    src: "/usr/src/linux-source-{{ kernel_major_minor_version }}.tar.xz"
    dest: "{{ linux_source_dir }}"
    extra_opts:  --strip-components=1
    creates: "{{ linux_source_dir }}/Makefile"

- name: patch kernel sources
  patch:
    basedir: "{{ linux_source_dir }}"
    src: ../../../patches/linux.patch

- name: compile kernel modules
  make:
    target: "{{ item.0 }}"
    chdir: "{{ linux_source_dir }}/{{ item.1 }}"
    params:
      # is this the proper way to do it?
      "--jobs": "{{ ansible_processor_vcpus }}"
  with_nested:
    - - clean
      - all
    - "{{ wireless_modules | map('dirname') | unique }}"

- name: unload kernel modules
  command: "rmmod {{ (item | basename | splitext).0  }}"
  ignore_errors: yes
  with_flattened:
    - ath10k_pci
    - ath10k_usb
    - ath10k_core
    - "{{ wireless_modules[::-1] }}"
  become: yes

- name: load kernel modules
  command: "insmod {{ linux_source_dir }}/{{ item }}"
  with_items: "{{ wireless_modules }}"
  become: yes
