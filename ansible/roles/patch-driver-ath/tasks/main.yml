- name: get friendly name of wireless device
  register: wireless_device
  shell: |
    cd /sys/class/net/{{ wireless_modules }}/device
    export d=$(cat vendor):$(cat device); lspci -d $d || lsusb -d $d
  changed_when: false

- name: install required firmwares
  package:
    name: firmware-atheros
  become: yes
  tags: online
  when: >-
    'QCA' in wireless_device.stdout or
    'AR7010' in wireless_device.stdout or
    'AR9271' in wireless_device.stdout

- name: determine kernel packages suffix
  set_fact:
    # e.g., "-rt-amd64"
    kernel_packages_variant: >-
      {{ ansible_kernel | regex_replace('[-.0-9]+-', '') }}

- name: determine kernel package version
  block:

    - name: query kernel package version from apt
      register: apt_show_linux_result
      shell: >-
        dpkg -s linux-image-{{ kernel_packages_variant }}
        | grep Version
        | cut -d' ' -f2
      changed_when: false

    - name: set kernel version to use
      set_fact:
        # e.g., "5.10.13-1"
        kernel_package_version: "{{ apt_show_linux_result.stdout_lines.0 }}"

- name: extract kernel upstream version Debian package version
  set_fact:
    # e.g., extract "4.18" from "4.18.3.2"
    kernel_major_minor_version: "{{
      kernel_package_version.split('+').0.split('.').0
      }}.{{
      kernel_package_version.split('+').0.split('.').1
    }}"

- name: assert kernel version to use could be identified
  debug:
    msg: >-
      detected kernel
      package version {{ kernel_package_version }}
      variant {{ kernel_packages_variant }}

- name: install required apt packages to compile kernel modules
  apt:
    name:
      - "linux-image-{{ kernel_packages_variant }}={{ kernel_package_version }}"
      - "linux-headers-{{ kernel_packages_variant }}={{ kernel_package_version }}"
      - "linux-source={{ kernel_package_version }}"

      # https://wiki.debian.org/BuildADebianKernelPackage
      - build-essential
      - libncurses5-dev

      - libssl-dev
      - needrestart

  become: yes
  tags: online

- name: check if we are running the latest kernel installed
  register: needrestart_result
  # Specifying the full path here, since ``/usr/sbin/` Ã¬sn't usually
  # in $PATH of ordinary users, but does not need elevated
  # rights to execute:
  command: /usr/sbin/needrestart -kb
  changed_when: false
  tags: verify

- name: reboot if we are not running the latest kernel installed
  reboot:
  when: "'NEEDRESTART-KSTA: 1' not in needrestart_result.stdout_lines"
  become: yes
  tags: verify

- name: create directory to extract the kernel sources to
  file:
    path: "{{ linux_source_dir }}"
    state: directory

- name: extract kernel sources
  unarchive:
    remote_src: yes
    src: "/usr/src/linux-source-{{ kernel_major_minor_version }}.tar.xz"
    dest: "{{ linux_source_dir }}"
    extra_opts:  --strip-components=1
    creates: "{{ linux_source_dir }}/Makefile"

- name: patch kernel sources
  patch:
    basedir: "{{ linux_source_dir }}"
    src: ../../../patches/linux.patch

- name: compile kernel modules
  make:
    target: "{{ item.0 }}"
    chdir: "{{ linux_source_dir }}/{{ item.1 }}"
    params:
      # is this the proper way to do it?
      "--jobs": "{{ ansible_processor_vcpus }}"
  with_nested:
    - - clean
      - all
    - "{{ wireless_modules | map('dirname') | unique }}"

- name: unload kernel modules
  register: unload_result
  command: "rmmod {{ (item | basename | splitext).0  }}"
  ignore_errors: yes
  with_flattened:
    - ath10k_pci
    - ath10k_usb
    - ath10k_core
    - "{{ wireless_modules[::-1] }}"
  become: yes

- name: count physical wireless devices
  register: iw_phy_count_result_pre
  shell: iw dev | grep -c '^phy'
  changed_when: false
  failed_when: iw_phy_count_result_pre.rc not in [0, 1]
  become: yes

- name: load kernel modules
  register: load_result
  command: "insmod {{ linux_source_dir }}/{{ item }}"
  with_items: "{{ wireless_modules }}"
  become: yes

- name: wait until new physical wireless devices have been detected
  register: iw_phy_count_result_post
  shell: iw dev | grep -c '^phy'
  changed_when: false
  failed_when: iw_phy_count_result_post.rc not in [0, 1]
  until: >
    iw_phy_count_result_pre.stdout != iw_phy_count_result_post.stdout
  delay: 1
  retries: 10
  become: yes

- name: re-gather facts
  setup:
  when: unload_result.changed or load_result.changed
