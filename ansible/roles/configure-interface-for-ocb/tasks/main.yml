- include_tasks: ../../_include/tasks/detect_wireless_interface.yml
  tags: configure

- become: yes
  tags: configure
  block:


    - name: put interface up
      command: "ip link set {{ wireless_interface }} up"

    - name: set regulatory domain (switch at least once to apply
            potential changes from regdb)
      command: "iw reg set {{ item }}"
      when: wireless_regulatory_domain is defined
      with_items:
        - "{{ 'XX' if wireless_regulatory_domain == '00'
                   else '00' }}"
        - "{{ wireless_regulatory_domain }}"


    - name: activate OCB mode
      command: "iw dev {{ wireless_interface }} set type ocb"

    - name: verify the wireless device is in OCB mode
      register: iw_dev_result
      command: iw dev
      changed_when: false
      failed_when: "
        'type outside context of a BSS' not in iw_dev_result.stdout"
      tags: verify

    - name: leave any OCB channel
      command: "iw dev {{ wireless_interface }} ocb leave"


    - name: "verify the wireless device supports
            {{ wireless_ocb_frequency }} MHz"
      register: iw_phy_result
      command: iw phy
      changed_when: false
      failed_when: >-
        '* ' ~ wireless_ocb_frequency ~ ' MHz ['
        not in iw_phy_result.stdout
      become: yes
      tags: verify

    - name: "put interface in 802.11p band
             ({{ wireless_ocb_frequency }}@{{ wireless_ocb_width }} MHz)"
      command: "iw dev {{ wireless_interface }} ocb join
                {{ wireless_ocb_frequency }} {{ wireless_ocb_width }}MHz"

    - name: verify the wireless device uses channel
            "{{ wireless_ocb_frequency }}@{{ wireless_ocb_width }} MHz"
      register: iw_dev_result
      command: iw dev
      changed_when: false
      failed_when: "
        '(' ~ wireless_ocb_frequency ~ ' MHz), width: ' ~ wireless_ocb_width ~ ' MHz,'
        not in iw_dev_result.stdout"
      tags: verify
